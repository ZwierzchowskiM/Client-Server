====================
FILE: .\client-server\src\main\java\org\example\Admin.java

package org.example;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@JsonTypeName("admin")
public class Admin extends User{
    @JsonCreator
    public Admin(@JsonProperty("username") String username,
                 @JsonProperty("password")String password) {
        super(username, password,"admin");
    }
}
====================

====================
FILE: .\client-server\src\main\java\org\example\Client.java

package org.example;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;

public class Client {

    private static final Logger logger = LogManager.getLogger(Client.class);
    private static final Scanner scanner = new Scanner(System.in);
    private static final ObjectMapper mapper = new ObjectMapper();
    static final String CLIENT_IP = "127.0.0.1";
    static final int CLIENT_PORT = 6666;
    private PrintWriter out;
    private BufferedReader in;
    private Socket socket;

    public static void main(String[] args) throws IOException {

        Client client = new Client();
        client.connectToServer(CLIENT_IP, CLIENT_PORT);
        client.communicateServer();
    }

    private void connectToServer(String ip, int port) {
        try {
            socket = new Socket(ip, port);
        } catch (IOException e) {
            logger.error("connection error" + e.getMessage());
        }
        logger.info("Connected to server at " + ip + ":" + port);
    }

    private void communicateServer() throws IOException {

        out = new PrintWriter(socket.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

        String input;
        while (!socket.isClosed()) {
            logger.info(printOptions());
            input = scanner.nextLine();
            handleCommand(input);
        }
    }

    public void handleCommand(String command) throws IOException {
        switch (command) {
            case "register" -> handleRegistration();
            case "uptime", "info", "help" -> {
                requestServer("uptime");
                String response = getServerResponse();
                handleResponse(response);
            }
            case "stop" -> {
                requestServer("stop");
                String response = getServerResponse();
                handleResponse(response);
                stopConnection();
            }
            default -> logger.info("Request unknown");
        }
    }

    private void requestServer(String message) {
        out.println(message);
    }

    private String getServerResponse() throws IOException {
        return in.readLine();
    }

    public void handleResponse(String jsonResp) {
        try {
            JsonNode rootNode = mapper.readTree(jsonResp);
            String prettyString = rootNode.toPrettyString();
            logger.info(prettyString);
        } catch (IOException e) {
            logger.error("Error processing JSON response: " + e.getMessage());
        }
    }

    public void stopConnection() throws IOException {
        socket.close();
        logger.info("Disconnected from server");
    }

    private String printOptions() {
        return "Choose an option: register,uptime,info,help,stop";
    }

    private void handleRegistration() throws IOException {
        requestServer("register");

        String response = getServerResponse();
        handleResponse(response);

        logger.info("Enter username:");
        String username = scanner.nextLine();
        logger.info("Enter password:");
        String password = scanner.nextLine();
        logger.info("Enter role:");
        String role = scanner.nextLine();

        out.println(username);
        out.println(password);
        out.println(role);

        String confirmation = in.readLine();
        System.out.println(confirmation);
    }
}
====================

====================
FILE: .\client-server\src\main\java\org\example\NormalUser.java

package org.example;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@JsonTypeName("normal")
public class NormalUser extends User {

    @JsonCreator
    public NormalUser(@JsonProperty("username") String username,
                      @JsonProperty("password")String password) {
        super(username, password, "normal");
    }

}

====================

====================
FILE: .\client-server\src\main\java\org\example\Server.java

package org.example;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.Instant;


public class Server {

    private static Logger logger = LogManager.getLogger(Server.class);
    private ServerSocket serverSocket;
    private Instant startTime;
    private ServerData serverData;
    private UserDataService userDataService;
    private PrintWriter out;
    private BufferedReader in;
    ServerResponse response = new ServerResponse();

    public Server(int port) {
        try {
            serverSocket = new ServerSocket(port);
        } catch (IOException e) {
            logger.error("Error creating server" + e.getMessage());
            throw new RuntimeException(e);
        }
        serverData = new ServerData();
        userDataService = new UserDataService();
        startTime = Instant.now();
        logger.info("Server started on port " + port);
    }

    public static void main(String[] args) {

        Server server = new Server(6666);
        try {
            server.start();
        } catch (RuntimeException e) {
            logger.error("starting connection");
        }
    }


    public void start() {
        while (true) {
            try {
                Socket clientSocket = acceptConnection();
                handleClient(clientSocket);
            } catch (IOException e) {
                logger.error("Error connecting client" + e.getMessage());
            } finally {
                closeResources();
            }
        }
    }

    private Socket acceptConnection() throws IOException {
        logger.info("Waiting for a client...");
        Socket clientSocket = serverSocket.accept();
        logger.info("Client connected");
        return clientSocket;
    }

    private void handleClient(Socket clientSocket) throws IOException {

        out = new PrintWriter(clientSocket.getOutputStream(), true);
        in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

        try {
            String clientRequest;
            while ((clientRequest = in.readLine()) != null) {
                logger.info("Client request: " + clientRequest);
                String response = handleRequest(clientRequest);
                sendMessageClient(response);
            }
        } catch (IOException e) {
            logger.error("Error handling client: " + e.getMessage());
        }
    }

    public String handleRequest(String request) throws JsonProcessingException {
        try {
            String serverResponse = switch (request) {
                case "register" -> handleRegistration();
                case "uptime" -> response.calculateUptime(startTime);
                case "help" -> response.printServerCommands(serverData.getCommandInfo());
                case "info" -> response.printServerInfo(serverData.getServerInfo());
                case "stop" -> stopServer();
                default -> ("{\"info\": \"command unknown\"}");
            };
            return serverResponse;
        } catch (IOException e) {
            logger.error("Error in generating JSON response");
            return "{\"error\": \"Internal server error\"}";
        }
    }

    private void sendMessageClient(String msg) {
        out.println(msg);
    }

    private String handleRegistration() throws IOException {

        String infoReg = "{\"request\": \"Please provide username and password\"}";
        sendMessageClient(infoReg);

        String username = in.readLine();
        String password = in.readLine();
        String role = in.readLine();

        User registeredUser = userDataService.addUser(username, password, role);

        return response.registerUser(registeredUser);
    }



    private String stopServer() {
        try {
            serverSocket.close();
            return "{\"info\": \"server stopped\"}";
        } catch (IOException e) {
            logger.error("Error closing server" + e.getMessage());
            throw new RuntimeException(e);
        }
    }

    private void closeResources() {
        try {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
        } catch (IOException e) {
            logger.error("Failed to close resources: " + e.getMessage());
        }
    }
}
====================

====================
FILE: .\client-server\src\main\java\org\example\ServerData.java

package org.example;

import java.util.HashMap;
import java.util.Map;

public class ServerData {

    private final Map<String, String> commandsInfo = new HashMap<>();
    private final Map<String, String> severInfo = new HashMap<>();
    static final String SERVER_VERSION = "0.1.0";
    static final String SERVER_CREATION_DATE = "19.04.2024";

    public ServerData() {
        initialize();
    }

    private void initialize() {
        commandsInfo.put("uptime", "Returns the server's uptime");
        commandsInfo.put("info", "Returns the server's version number and creation date");
        commandsInfo.put("help", "Returns a list of available commands with a brief description");
        commandsInfo.put("stop", "stops both the server and the client simultaneously");
        commandsInfo.put("addUser", "Add new user");

        severInfo.put("version", SERVER_VERSION);
        severInfo.put("creation date", SERVER_CREATION_DATE);
    }

    public Map<String, String> getCommandInfo() {
        return commandsInfo;
    }

    public Map<String, String> getServerInfo() {
        return severInfo;
    }
}
====================

====================
FILE: .\client-server\src\main\java\org\example\ServerResponse.java

package org.example;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

public class ServerResponse {

    private ObjectMapper mapper = new ObjectMapper();

    public String calculateUptime(Instant startTime) throws JsonProcessingException {
        Duration serverUptime = Duration.between(startTime, Instant.now());
        Map<String, Integer> uptimeResponse = new HashMap<>();
        uptimeResponse.put("hours", serverUptime.toHoursPart());
        uptimeResponse.put("minutes", serverUptime.toMinutesPart());
        uptimeResponse.put("seconds", serverUptime.toSecondsPart());
        return mapper.writeValueAsString(uptimeResponse);
    }

    public String printServerCommands(Map<String, String> commandsInfo) throws JsonProcessingException {
        return mapper.writeValueAsString(commandsInfo);
    }

    public String printServerInfo(Map<String, String> serverInfo) throws JsonProcessingException {
        return mapper.writeValueAsString(serverInfo);
    }

    public String registerUser(User user) throws JsonProcessingException {
        Map<String, User> registeredUser = new HashMap<>();
        registeredUser.put("Registered user", user);
        return mapper.writeValueAsString(registeredUser);
    }



}
====================

====================
FILE: .\client-server\src\main\java\org\example\User.java

package org.example;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY;

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = PROPERTY, property = "type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = Admin.class, name = "admin"),
        @JsonSubTypes.Type(value = NormalUser.class, name = "normal")})
@Getter
@Setter
@AllArgsConstructor
public abstract class User {

    @JsonProperty("username")
    private String username;

    @JsonProperty("password")
    private String password;

    @Setter(AccessLevel.NONE)
    @JsonProperty("role")
    private String role;
}
====================

====================
FILE: .\client-server\src\main\java\org\example\UserDataService.java

package org.example;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class UserDataService {

    private final ObjectMapper mapper = new ObjectMapper();
    private static final String FILE_PATH = "./users.json";

    public User addUser(String username, String password, String role) throws IOException {
        Map<String, User> users = loadUsers();
        User newUser = switch (role) {
            case "normal" -> new NormalUser(username, password);
            case "admin" -> new Admin(username, password);
            default -> throw new IllegalStateException("Unexpected value: " + role);
        };

        users.put(username,newUser);
        saveUsers(users);
        return newUser;
    }

    public Map<String,User> loadUsers() throws IOException {
        File file = new File(FILE_PATH);
        if (file.exists() && file.length() != 0) {
            return mapper.readValue(file, new TypeReference<Map<String,User>>() {});
        } else {
            return new HashMap<String,User>();
        }
    }

    public void saveUsers(Map<String,User> users) throws IOException {
        File file = new File(FILE_PATH);
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        mapper.writerFor(new TypeReference<Map<String,User>>() { }).writeValue(file, users);
    }
}
====================

